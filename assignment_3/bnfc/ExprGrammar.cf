comment "--" ;

Prog_P0 . Prog ::= Fun Prog;
Prog_P1 . Prog ::= ;

Fun_P0 . Fun ::= "fun" IDENT ArgList "=" Exp ;

ArgList_P0 . ArgList ::= IDENT ArgList ;
ArgList_P1 . ArgList ::= ;

Exp_P8 . Exp2 ::= IDENT Exp1 ParamList ;
Exp_P0 . Exp ::= Exp "+" Exp ;
Exp_P1 . Exp ::= Exp "-" Exp ;
Exp_P2 . Exp ::= Exp "*" Exp ;
Exp_P3 . Exp ::= Exp "/" Exp ;
Exp_P4 . Exp ::= "-" Exp ;
Exp_P5 . Exp3 ::= IVAL ;
Exp_P6 . Exp3 ::= IDENT ;
Exp_P7 . Exp ::= "if" BExp "then" Exp "else" Exp ;
Exp_P9 . Exp ::= "let" FunList "in" Exp ;
-- _ . Exp ::= Exp1 ;
-- _ . Exp1 ::= Exp2 ;
-- _ . Exp2 ::= "(" Exp ")" ;
coercions Exp 3 ;

FunList_P0 . FunList ::= Fun FunList ;
FunList_P1 . FunList ::= ;

ParamList_P0 . ParamList ::= Exp ParamList ;
ParamList_P1 . ParamList ::= ;

 
BExp_P0 . BExp ::= Exp "<" Exp ; 
BExp_P1 . BExp ::= Exp ">" Exp ;
BExp_P2 . BExp ::= Exp "==" Exp ;
BExp_P3 . BExp ::= BExp "&&" BExp ;
BExp_P4 . BExp ::= BExp "||" BExp ;
BExp_P5 . BExp ::= "not" BExp ;
 
token IVAL (digit)(digit)* ;
token IDENT (letter)('_' | digit | letter)* ;

